$PendulumApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        // DutyCycle GAM defines the frequency of the slow RT threads
        +DutyCycle = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 100
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        +FileReaderGAM = {
            Class = IOGAM
            InputSignals = { 
                RtAcc = {
                    DataSource = FileReader
		            Type = float32
                }
            }
            OutputSignals = {               
                RtAcc = {
                    DataSource = DDB1
                    Type = float32
                }               
            }
        }
        +ConstAcc = {
            Class = ConstantGAM
            OutputSignals = {
                RtPeriod = {
                    DataSource = DDB1
                    Type = float32
                    Default = 0.01
                }
                Command = {
                    DataSource = DDB1
                    Type = uint8
                    Default = 254
                }
            }
        }
        +Write2PData = {
            Class = IOGAM
            InputSignals = {
                RtAcc = {
                    DataSource = DDB1
                }
                RtPeriod = {
                    DataSource = DDB1
                    
                }
                Command = {
                    DataSource = DDB1
                }
            }
            OutputSignals = {
                RtAcc = {
                    DataSource = STM32
                }
                RtPeriod = {
                    DataSource = STM32
                }
                Command = {
                    DataSource = STM32
                    
                }
            }
        }

        // MotorStatus GAM transforms read out status from STM32 into a usable format.
        +MotorStatus = {
            Class = IOGAM
            InputSignals = {
                Status = {
                    DataSource = "STM32"
                }
            }
            OutputSignals = {
                MotorState = {
                    Type = uint8
                }
                MotorPosition = {
                    Type = int32
                }
                EncoderPosition = {
                    Type = uint32
                }
            }
        }

        +Write2FData = {
            Class = IOGAM
            InputSignals = {
                MotorPosition = {
                    DataSource = DDB1
                }
                EncoderPosition = {
                    DataSource = DDB1       
                }
            }
            OutputSignals = {
                MotorPosition = {
                    DataSource = STM32FileWriter
                }
                EncoderPosition = {
                    DataSource = STM32FileWriter
                }
            }
        }

        // Logging GAM can be used to print the current motor status.
        +Logging = {
            Class = IOGAM
            InputSignals = {
                MotorState = {
                    Type = uint8
                }
                MotorPosition = {
                    Type = int32
                }
                EncoderPosition = {
                    Type = uint32
                }
            }
            OutputSignals = {
                MotorState = {
                    Type = uint8
                    DataSource = "LoggerDataSource"
                }
                MotorPosition = {
                    Type = int32
                    DataSource = "LoggerDataSource"
                }
                EncoderPosition = {
                    Type = uint32
                    DataSource = "LoggerDataSource"
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
            AllowNoProducers = 1
            ResetUnusedVariablesAtStateChange = 0
       	}
        +FileReader = {
            Class = FileDataSource::FileReader
            Filename = "swingup_acc_cmd.csv"
	        Interpolate = "no"
            FileFormat = "csv"
            CSVSeparator = ","
            EOF = "Error"
            Preload = "yes"
            +Messages = {
                Class = ReferenceContainer
                +FileRuntimeError = {
                    Class = Message
                    Destination = StateMachine
                    Function = GO_BALANCE
                    Mode = ExpectsReply
                    ReplyTimeout = 10
                }
            }
        }
        +STM32FileWriter = {
            Class = FileDataSource::FileWriter
            NumberOfBuffers = 10000000
            CPUMask = 0xFE
            StackSize = 10000000 
            Filename = "control_data_acc.csv"
            Overwrite = "yes"
            FileFormat = "csv"
            CSVSeparator = ","
            StoreOnTrigger = 0
            Signals = {
                MotorPosition = {
                    Type = int32
                }
                EncoderPosition = {
                    Type = uint32
                }
            }
        }
        +STM32 = {
            Class = MotorSTM32
            Port = "/dev/ttyACM1"
            BaudRate = 230400
            Signals = {
                Status = {
                    Type = uint8
                    NumberOfElements = 9
                    NumberOfDimensions = 1
                }
                Command = {
                    Type = uint8
                }
                CommandParameter = {
                    Type = int32
                }
                RtAcc = {
                    Type = float32
                }
                RtPeriod = {
                    Type = float32
                }
            }
        }
        +Timer = {
            Class = LinuxTimer
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
                AbsoluteTime = {
                    Type = uint64
                }
            }
        }
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
    }
    +States = {
        Class = ReferenceContainer
        +Startup = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {DutyCycle FileReaderGAM ConstAcc Write2PData MotorStatus Write2FData}
                }
            }
        }
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
