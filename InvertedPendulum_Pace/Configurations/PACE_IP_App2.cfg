$StateMachine1 = {
    Class = StateMachine
    +State1 = {
        Class = ReferenceContainer
        +GoToState2 = {
            Class = StateMachineEvent
            NextState = State2
            NextStateError = ERROR
            Timeout = 0
            +Prepare2 = {
                Class = Message
                Destination = "TestApp"
                Function = PrepareNextState
                MaxWait = "0"
                Mode = "ExpectsReply"
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = "State2"
                }
            } 
            +Start2 = {
                Class = Message
                Destination = "TestApp"
                Function = "StartNextStateExecution"
                MaxWait = "0"
                Mode = "ExpectsReply"
            }
        }
    }
    +State2 = {
        Class = ReferenceContainer
        +GoToState3 = {
            Class = StateMachineEvent
            NextState = State1
            NextStateError = ERROR
            Timeout = 0
            +Prepare1 = {
                Class = Message
                Destination = "TestApp"
                Function = PrepareNextState
                MaxWait = "0"
                Mode = "ExpectsReply"
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = "State3"
                }
            }
            +Start1 = {
                Class = Message
                Destination = "TestApp"
                Function = "StartNextStateExecution"
                MaxWait = "0"
                Mode = "ExpectsReply"
            }
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +GO_ERROR = {
            Class = StateMachineEvent
            NextState = State1
            NextStateError = ERROR
        }
    }
}

$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        
        +Homing = {
            Class = HomingGAM
            InputSignals = {
                encoder_counter = {
                    DataSource = STM32
                    Type = uint32
                }
            }
            OutputSignals = {
                state_sig = {
                    Type = uint8
                }
                PendulumPositionBotom = {
                    Type = uint32
                }
            }
        }

        +Constants = {
            Class = ConstantGAM
            OutputSignals = {
                state = {
                    DataSource = DDB1
                    Type = uint8
                    Default = 3
                }
            }
        }

        +PathOptGAM = {
            Class = IOGAM
            InputSignals = { 
                motor_Acceleration = {
                    DataSource = STM32FileReader
                    Type = int32
                }
                state = {
                    DataSource = DDB1
                    Type = uint8
                }
            }
            OutputSignals = {
                motor_Acceleration = {
                    DataSource = STM32
                    Type = int32
                    }
                state = {
                    DataSource = STM32
                    Type = uint8
                }
            }
        }

        +IPStatGAM = {
            Class = IPStatusGAM
            InputSignals = {
            	encoder_counter = {
		            DataSource = STM32
                    Type = uint32
                }
            }
            OutputSignals = {
                state_sig = {
                    DataSource = DDB1
                    Type = uint8
                }
            }
        }
        +Switch = {
            Class = MessageGAM
            TriggerOnChange = 1
            +Events = {
                Class = ReferenceContainer
                +StateTo1 = {
                    Class = EventConditionTrigger
                    EventTrigger = {
                        CommandState = 1
                    }
                    +Start1 = {
                        Class = Message
                        Destination = StateMachine1
                        Function = "GoToState1"
                        MaxWait = "0"
                        Mode = "ExpectsReply"
                    }
                }
                +StateTo2 = {
                    Class = EventConditionTrigger
                    EventTrigger = {
                        CommandState = 2
                    }
                    +Start2 = {
                        Class = Message
                        Destination = StateMachine1
                        Function = "GoToState2"
                        MaxWait = "0"
                        Mode = "ExpectsReply"
                    }
                }
            }
            InputSignals = {
                CommandState = {
                    DataSource = DDB1
                    Type = uint32
                    Alias = state_sig
                }
            }
            OutputSignals = {
                PendingMessages = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
    }

    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
            AllowNoProducers = 1
            ResetUnusedVariablesAtStateChange = 0
       	}
        +STM32 = {
            Class = STM32
            Port = "/dev/ttyACM0"
            BaudRate = 230400
            Signals = {
                ReceivedByteCount = {
                    Type = uint32
                }
                DiscardedByteCount = {
                    Type = uint32
                }
                ReadErrorCount = {
                    Type = uint32
                }
                MessageCount = {
                    Type = uint32
                }
                MessageRxTime = {
                    Type = uint64
                }
                MessageTxTime = {
                    Type = uint64
                }
                RxBufferOccupancy = {
                    Type = uint32
                }
                rotor_position_steps = {
                    Type = int32
                }
                encoder_counter = {
                    Type = uint32
                }
                motor_ImpuleAmplitude = {
                    Type = int32
                }
                motor_Direction = {
                    Type = uint8
                }
                motor_Acceleration = {
                    Type = int32
                }
                break_Control_Loop = {
                    Type = uint8
                }
                state = {
                    Type = uint8
                }
                encoder_position = {
                    Type = float32
                }
            }
        }
        +STM32FileReader = {
            Class = FileDataSource::FileReader
            Filename = "PathOptInput.csv"
	        Interpolate = "no"
            FileFormat = "csv"
            CSVSeparator = ","
            EOF = "Rewind"
            Preload = "yes" 
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        } 
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }      
    }

    +States = {
        Class = ReferenceContainer
        +State1 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {Homing Switch}
                }
            }
        }

        +State2 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {Constants PathOptGAM IPStatGAM Switch}
                }
            }
        }          
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
