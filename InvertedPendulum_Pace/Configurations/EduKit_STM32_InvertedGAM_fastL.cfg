+StateMachine1 = {
    Class = StateMachine
    +State1 = {
        Class = ReferenceContainer
        +GoToState2 = {
            Class = StateMachineEvent
            NextState = State2
            NextStateError = ERROR
            Timeout = 0
            +Prepare2 = {
                Class = Message
                Destination = "TestApp"
                Function = PrepareNextState
                MaxWait = "0"
                Mode = "ExpectsReply"
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = "State2"
                }
            }
            +Start2 = {
                Class = Message
                Destination = "TestApp"
                Function = "StartNextStateExecution"
                MaxWait = "0"
                Mode = "ExpectsReply"
            }
        }
    }
    +State2 = {
        Class = ReferenceContainer
        +GoToState3 = {
            Class = StateMachineEvent
            NextState = State3
            NextStateError = CSVERROR
            Timeout = 0
            +Prepare1 = {
                Class = Message
                Destination = "TestApp"
                Function = PrepareNextState
                MaxWait = "0"
                Mode = "ExpectsReply"
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = "State1"
                }
            }
            +Start1 = {
                Class = Message
                Destination = "TestApp"
                Function = "StartNextStateExecution"
                MaxWait = "0"
                Mode = "ExpectsReply"
            }
        }
    }
    +State3 = {
        Class = ReferenceContainer
        +GoToState1 = {
            Class = StateMachineEvent
            NextState = State1
            NextStateError = ERROR
            Timeout = 0
            +Prepare1 = {
                Class = Message
                Destination = "TestApp"
                Function = PrepareNextState
                MaxWait = "0"
                Mode = "ExpectsReply"
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = "State1"
                }
            }
            +Start1 = {
                Class = Message
                Destination = "TestApp"
                Function = "StartNextStateExecution"
                MaxWait = "0"
                Mode = "ExpectsReply"
            }
        }
    }
    +CSVERROR = {
        Class = ReferenceContainer
        +Loop = {
            Class = StateMachineEvent
            NextState = State3
            NextStateError = Start1
            Timeout = 0
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +Loop = {
            Class = StateMachineEvent
            NextState = State1
            NextStateError = ERROR
            Timeout = 0
        }
    }
}

$TestApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        +STM32Input = {
            Class = IOGAM
            InputSignals = { 
                encoder_counter = {
                    DataSource = STM32
                }
                rotor_position_steps = {
                    DataSource = STM32
                }
            }
            OutputSignals = { 
                encoder_counter = {
                    DataSource = DDB1
                }
                rotor_position_steps = {
                    DataSource = DDB1
                }
            }
        }
        +State1GAMs = {
            Class = GAMGroup
            +IsIPZero = {
                Class = StatisticsGAM
                InputSignals = {
                    encoder_counter = {
                        DataSource = DDB1
                        Type = uint32
                        Default = 1
                    }
                }
                OutputSignals = {
                    encoder_counter_avg = {
                        DataSource = DDB1
                        Type = uint32
                    }
                    encoder_counter_std = {  
                        DataSource = DDB1 
                        Type = uint32      
                    }
                }
            }
            +Switchto2 = {
                Class = MessageGAM
                TriggerOnChange = 1
                +Events = {
                    Class = ReferenceContainer
                    +StateTo2 = {
                        Class = EventConditionTrigger
                        EventTrigger = {
                            CommandState = 0
                        }
                        +MessageStateTo1 = {
                            Class = Message
                            Destination = StateMachine1
                            Function = "GoToState2"
                            MaxWait = "0"
                            }
                    }
                }
                InputSignals = {
                    CommandState = {
                        DataSource = DDB1
                        Type = uint32
                        Alias = encoder_counter_std
                    }
                }
                OutputSignals = {
                    PendingMessages = {
                        DataSource = DDB1
                        Type = uint32
                    }
                }
            }
        }
        +State2GAMs = {
            Class = GAMGroup
            +State2Output = {
                Class = IOGAM
                InputSignals = {               
                    motor_ImpuleAmplitude = {
                        DataSource = STM32FileReader
                        Type = int32
                    }
                    motor_Direction = {
                        DataSource = STM32FileReader
                        Type = uint8
                    }
                    motor_Acceleration = {
                        DataSource = STM32FileReader
                        Type = int32
                    }
                    break_Control_Loop = {
                        DataSource = STM32FileReader
                        Type = uint8
                    }
                    state = {
                        DataSource = STM32FileReader
                        Type = uint8
                    }
                    encoder_position = {
                        DataSource = STM32FileReader
                        Type = float32
                    }      
                }
                OutputSignals = {               
                    motor_ImpuleAmplitude = {
                        DataSource = STM32
                        Type = int32
                    }
                    motor_Direction = {
                        DataSource = STM32
                        Type = uint8
                    }
                    motor_Acceleration = {
                        DataSource = STM32
                        Type = int32
                    }
                    break_Control_Loop = {
                        DataSource = STM32
                        Type = uint8
                    }
                    state = {
                        DataSource = STM32
                        Type = uint8
                    }
                    encoder_position = {
                        DataSource = STM32
                        Type = float32
                    }
                }
            }
        }
        +State3GAMs = {
            Class = GAMGroup
            +State3Condition = {
                Class = MathExpressionGAM
                Expression = "
                                Ret1 = Encoder_counter > HigherLimit;
                                Ret2 = Encoder_counter < LowerLimit;
                                Out = Ret1 && Ret2
                             "
                InputSignals = {              .
                    encoder_counter = {
                        Type = uint32
                        NumberOfElements = 1
                    }
                }
                OutputSignals = {             
                    Out1 = {
                        Type = float32
                    }
                }
            }
            +Switchto1 = {
                Class = MessageGAM
                TriggerOnChange = 1
                +Events = {
                    Class = ReferenceContainer
                    +StateTo1 = {
                        Class = EventConditionTrigger
                        EventTrigger = {
                            CommandState = 1
                        }
                        +MessageStateTo1 = {
                            Class = Message
                            Destination = StateMachine1
                            Function = "GoToState1"
                            MaxWait = "0"
                        }
                    }
                }
                InputSignals = {
                    CommandState = {
                        DataSource = DDB1
                        Type = uint32
                        Alias = Out1
                    }
                }
                OutputSignals = {
                    PendingMessages = {
                        DataSource = DDB1
                        Type = uint32
                    }
                }
            }
            +State3Controller = {
            }
            +State3Output = {
                Class = IOGAM
                InputSignals = {               
                    motor_ImpuleAmplitude = {
                        DataSource = DDB1
                        Type = int32
                    }
                    motor_Direction = {
                        DataSource = DDB1
                        Type = uint8
                    }
                    motor_Acceleration = {
                        DataSource = DDB1
                        Type = int32
                    }
                    break_Control_Loop = {
                        DataSource = DDB1
                        Type = uint8
                    }
                    state = {
                        DataSource = DDB1
                        Type = uint8
                    }
                    encoder_position = {
                        DataSource = DDB1
                        Type = float32
                    }
                }
                OutputSignals = {               
                    motor_ImpuleAmplitude = {
                        DataSource = STM32
                        Type = int32
                    }
                    motor_Direction = {
                        DataSource = STM32
                        Type = uint8
                    }
                    motor_Acceleration = {
                        DataSource = STM32
                        Type = int32
                    }
                    break_Control_Loop = {
                        DataSource = STM32
                        Type = uint8
                    }
                    state = {
                        DataSource = STM32
                        Type = uint8
                    }
                    encoder_position = {
                        DataSource = STM32
                        Type = float32
                    }
                    
                }
            }
        }
        +CSVErrGAM = {
            Class = GAMGroup
            +CSVCondition = {
                Class = MathExpressionGAM
                Expression = "
                                Ret1 = Encoder_counter < HigherLimit;
                                Ret2 = Encoder_counter > LowerLimit;
                                Out = Ret1 && Ret2
                             "
                InputSignals = {              .
                    encoder_counter = {
                        Type = uint32
                        NumberOfElements = 1
                    }
                }
                OutputSignals = {             
                    Out1 = {
                        Type = float32
                    }
                }
            }
            +Switchto3 = {
                Class = MessageGAM
                TriggerOnChange = 1
                +Events = {
                    Class = ReferenceContainer
                    +StateTo1 = {
                        Class = EventConditionTrigger
                        EventTrigger = {
                            CommandState = 1
                        }
                        +MessageStateTo1 = {
                            Class = Message
                            Destination = StateMachine1
                            Function = "GoToState3"
                            MaxWait = "0"
                        }
                    }
                }
                InputSignals = {
                    CommandState = {
                        DataSource = DDB1
                        Type = uint32
                        Alias = Out1
                    }
                }
                OutputSignals = {
                    PendingMessages = {
                        DataSource = DDB1
                        Type = uint32
                    }
                }
            }
        }
    }

    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +STM32 = {
            Class = STM32
            Port = "/dev/ttyUSB1"
            BaudRate = 230400
            Signals = {
                ReceivedByteCount = {
                    Type = uint32
                }
                DiscardedByteCount = {
                    Type = uint32
                }
                ReadErrorCount = {
                    Type = uint32
                }
                MessageCount = {
                    Type = uint32
                }
                MessageRxTime = {
                    Type = uint64
                }
                MessageTxTime = {
                    Type = uint64
                }
                RxBufferOccupancy = {
                    Type = uint32
                }
                rotor_position_steps = {
                    Type = int32
                }
                encoder_counter = {
                    Type = uint32
                }
                motor_ImpuleAmplitude = {
                    Type = int32
                }
                motor_Direction = {
                    Type = uint8
                }
                motor_Acceleration = {
                    Type = int32
                }
                break_Control_Loop = {
                    Type = uint8
                }
                state = {
                    Type = uint8
                }
                encoder_position = {
                    Type = float32
                }
            }
        }
        +STM32FileReader = {
            Class = FileReader
            Filename = "control_data_logs.csv" 
            Interpolate = "yes" //Compulsory. If "yes" the data will be interpolated and an XAxisSignal  signal shall be provided. If set to "no" the data will be provided as is.
            FileFormat = "csv" 
            CSVSeparator = "," 
            XAxisSignal = "Time" //Compulsory if Interpolate = "yes" and none of the signals interacting with this FileReader has Frequency > 0. Name of the signal containing the independent variable to generate the interpolation samples.
            InterpolationPeriod = 1000 //Compulsory if Interpolate = "yes" and none of the signals interacting with this FileReader has Frequency > 0. InterpolatedXAxisSignal += InterpolationPeriod. It will be read as an uint64.
            EOF = "Rewind" 
            Preload = "yes" 
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        } 
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }      
    }

    +States = {
        Class = ReferenceContainer
        +State1 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {STM32Input State1GAMs Switchto2}
                }
            }
        }
        +State2 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {STM32Input State1GAMs Switchto2}
                }
            }
        } 
        +State3 = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {STM32Input State3Condition Switchto1 State3Controller State3Output}
                }
            }
        }
        +CSVERROR = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {CSVCondition Switchto3}
                }
            }
        }          
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
