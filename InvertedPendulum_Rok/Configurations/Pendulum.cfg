+StateMachine = {
    Class = StateMachine
    +INITIAL = {
        Class = ReferenceContainer
        +START = {
            Class = StateMachineEvent
            NextState = STARTUP
            NextStateError = ERROR
            Timeout = 0
            +PrepareNextStateMsg = {
                Class = Message
                Destination = PendulumApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Startup
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = PendulumApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +STARTUP = {
        Class = ReferenceContainer
        +GO_HOMING = {
            Class = StateMachineEvent
            NextState = HOMING
            NextStateError = ERROR
            Timeout = 0
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = PendulumApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +PrepareNextStateMsg = {
                Class = Message
                Destination = PendulumApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Homing
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = PendulumApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +HOMING = {
        Class = ReferenceContainer
        +GO_SWING_UP_AND_BALANCE = {
            Class = StateMachineEvent
            NextState = SWING_UP_AND_BALANCE
            NextStateError = ERROR
            Timeout = 0
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = PendulumApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +PrepareNextStateMsg = {
                Class = Message
                Destination = PendulumApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = SwingUpAndBalance
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = PendulumApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +SWING_UP_AND_BALANCE = {
        Class = ReferenceContainer
        +GO_STARTUP = {
            Class = StateMachineEvent
            NextState = STARTUP
            NextStateError = ERROR
            Timeout = 0
            +StopCurrentStateExecutionMsg = {
                Class = Message
                Destination = PendulumApp
                Function = StopCurrentStateExecution
                Mode = ExpectsReply
            }
            +PrepareNextStateMsg = {
                Class = Message
                Destination = PendulumApp
                Mode = ExpectsReply
                Function = PrepareNextState
                +Parameters = {
                    Class = ConfigurationDatabase
                    param1 = Startup
                }
            }
            +StartNextStateExecutionMsg = {
                Class = Message
                Destination = PendulumApp
                Function = StartNextStateExecution
                Mode = ExpectsReply
            }
        }
    }
    +ERROR = {
        Class = ReferenceContainer
        +GO_ERROR = {
            Class = StateMachineEvent
            NextState = HOMING
            NextStateError = ERROR
        }
    }
}
$PendulumApp = {
    Class = RealTimeApplication
    +Functions = {
        Class = ReferenceContainer
        // DutyCycle GAM defines the frequency of the RT thread
        +DutyCycle = {
            Class = IOGAM
            InputSignals = {
                Counter = {
                    DataSource = Timer
                    Type = uint32
                }
                Time = {
                    Frequency = 2
                    DataSource = Timer
                    Type = uint32
                }
            }
            OutputSignals = {
                Counter = {
                    DataSource = DDB1
                    Type = uint32
                }
                Time = {
                    DataSource = DDB1
                    Type = uint32
                }
            }
        }
        // SwitchState GAM switches RT states depending on CommandState value 
        +SwitchState = {
            Class = MessageGAM
            TriggereOnChange = 1
            +Events = {
                Class = ReferenceContainer
                +IssueHoming = {
                    Class = EventConditionTrigger
                    CPUMask = 0x1
                    EventTrigger = {
                        CommandState = 1
                    }
                    +IssueGoHoming = {
                        Class = Message
                        Destination = StateMachine
                        Function = GO_HOMING
                        Mode = ExpectsReply
                        ReplyTimeout = 10
                    }
                }
                +IssueSwingUpAndBalance = {
                    Class = EventConditionTrigger
                    CPUMask = 0x1
                    EventTrigger = {
                        CommandState = 2
                    }
                    +IssueGoSwingUpAndBalance = {
                        Class = Message
                        Destination = StateMachine
                        Function = GO_SWING_UP_AND_BALANCE
                        Mode = ExpectsReply
                        ReplyTimeout = 10
                    }
                }
                +IssueStartup = {
                    Class = EventConditionTrigger
                    CPUMask = 0x1
                    EventTrigger = {
                        CommandState = 3
                    }
                    +IssueGoStartup = {
                        Class = Message
                        Destination = StateMachine
                        Function = GO_STARTUP
                        Mode = ExpectsReply
                        ReplyTimeout = 10
                    }
                }
            }
            InputSignals = {
                CommandState = {
                    Type = uint8
                }
            }
            OutputSignals = {
                PendingMessages1 = {
                    Type = uint32
                }
            }
        }
        // MotorStatus GAM transforms read out status from STM32 into a usable format.
        +MotorStatus = {
            Class = IOGAM
            InputSignals = {
                Status = {
                    DataSource = "STM32"
                }
            }
            OutputSignals = {
                MotorState = {
                    Type = uint8
                }
                MotorPosition = {
                    Type = int32
                }
                EncoderPosition = {
                    Type = uint32
                }
            }
        }
        // Startup GAM moves the motor at starup to unbalance the pendulum.
        +Startup = {
            Class = StartupGAM
            InputSignals = {
                MotorState = {
                    Type = uint8
                }
            }
            OutputSignals = {
                Command = {
                    DataSource = "STM32"
                }
                CommandParameter = {
                    DataSource = "STM32"
                }
                CommandState = {
                    Type = uint8
                }
            }
        }
        // Homing GAM is checking when the pendulum stops moving.
        +Homing = {
            Class = HomingGAM
            InputSignals = {
                EncoderPosition = {
                    Type = uint32
                }
            }
            OutputSignals = {
                CommandState = {
                    Type = uint8
                }
                PendulumPositionBotom = {
                    Type = uint32
                }
            }
        }
        // SwingUp GAM swings the pendulum to the heighest point.
        +SwingUp = {
            Class = SwingUpGAM
            InputSignals = {
                MotorState = {
                    Type = uint8
                }
                EncoderPosition = {
                    Type = uint32
                }
                MotorPosition = {
                    Type = int32
                }
                PendulumPositionBotom = {
                    Type = uint32
                }
            }
            OutputSignals = {
                Command = {
                    DataSource = "STM32"
                }
                CommandParameter = {
                    DataSource = "STM32"
                }
                CommandState = {
                    Type = uint8
                }
            }
        }
        // Logging GAM can be used to print the current motor status.
        +Logging = {
            Class = IOGAM
            InputSignals = {
                MotorState = {
                    Type = uint8
                }
                MotorPosition = {
                    Type = int32
                }
                EncoderPosition = {
                    Type = uint32
                }
            }
            OutputSignals = {
                MotorState = {
                    Type = uint8
                    DataSource = "LoggerDataSource"
                }
                MotorPosition = {
                    Type = int32
                    DataSource = "LoggerDataSource"
                }
                EncoderPosition = {
                    Type = uint32
                    DataSource = "LoggerDataSource"
                }
            }
        }
    }
    +Data = {
        Class = ReferenceContainer
        DefaultDataSource = DDB1
        +DDB1 = {
            Class = GAMDataSource
            AllowNoProducers = 1
            ResetUnusedVariablesAtStateChange = 0
       	}
        +STM32 = {
            Class = MotorSTM32
            Port = "/dev/ttyACM0"
            BaudRate = 230400
            Signals = {
                Status = {
                    Type = uint8
                    NumberOfElements = 9
                    NumberOfDimensions = 1
                }
                Command = {
                    Type = uint8
                }
                CommandParameter = {
                    Type = int32
                }
            }
        }
        +Timer = {
            Class = LinuxTimer
            SleepNature = "Default"
            Signals = {
                Counter = {
                    Type = uint32
                }
                Time = {
                    Type = uint32
                }
            }
        }
        +LoggerDataSource = {
            Class = LoggerDataSource
        }
        +Timings = {
            Class = TimingDataSource
        }
    }
    +States = {
        Class = ReferenceContainer
        +Startup = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {DutyCycle MotorStatus Startup SwitchState}
                }
            }
        }
        +Homing = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {DutyCycle MotorStatus Homing SwitchState}
                }
            }
        }
        +SwingUpAndBalance = {
            Class = RealTimeState
            +Threads = {
                Class = ReferenceContainer
                +Thread1 = {
                    Class = RealTimeThread
                    CPUs = 0x1
                    Functions = {MotorStatus SwingUp SwitchState}
                }
            }
        }
    }
    +Scheduler = {
        Class = GAMScheduler
        TimingDataSource = Timings
    }
}
